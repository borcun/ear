<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_scheduler_8cpp_source" xml:lang="en-US">
<title>scheduler.cpp</title>
<indexterm><primary>src/sched/scheduler.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_scheduler_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_scheduler_8h">scheduler.h</link>&quot;</emphasis>
<anchor xml:id="_scheduler_8cpp_source_1l00002"/>00002 
<anchor xml:id="_scheduler_8cpp_source_1l00003"/><link linkend="_class_e_a_r_1_1_schedule_1_1_scheduler_1ace5f2e69ef90cfb92111fc7ef8694eb3">00003</link> <link linkend="_class_e_a_r_1_1_schedule_1_1_scheduler_1ace5f2e69ef90cfb92111fc7ef8694eb3">EAR::Schedule::Scheduler::Scheduler</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;name)&#32;:&#32;m_name(name)&#32;{
<anchor xml:id="_scheduler_8cpp_source_1l00004"/>00004 &#32;&#32;m_state&#32;=&#32;<link linkend="_namespace_e_a_r_1_1_schedule_1a17680738dc32d13bab0ca075b62cebd0a9941b734c90a10a2f76894c80f298acb">SCHEDULER_IDLE</link>;
<anchor xml:id="_scheduler_8cpp_source_1l00005"/>00005 &#32;&#32;spdlog::debug(<emphasis role="stringliteral">&quot;scheduler&#32;{}&#32;created&quot;</emphasis>,&#32;m_name);
<anchor xml:id="_scheduler_8cpp_source_1l00006"/>00006 }
<anchor xml:id="_scheduler_8cpp_source_1l00007"/>00007 
<anchor xml:id="_scheduler_8cpp_source_1l00008"/><link linkend="_class_e_a_r_1_1_schedule_1_1_scheduler_1a141b3346112376f5562d7e174bca52bc">00008</link> <link linkend="_class_e_a_r_1_1_schedule_1_1_scheduler_1a141b3346112376f5562d7e174bca52bc">EAR::Schedule::Scheduler::~Scheduler</link>()&#32;{
<anchor xml:id="_scheduler_8cpp_source_1l00009"/>00009 &#32;&#32;spdlog::debug(<emphasis role="stringliteral">&quot;scheduler&#32;{}&#32;terminated&quot;</emphasis>,&#32;getName());
<anchor xml:id="_scheduler_8cpp_source_1l00010"/>00010 }
<anchor xml:id="_scheduler_8cpp_source_1l00011"/>00011 
<anchor xml:id="_scheduler_8cpp_source_1l00012"/><link linkend="_class_e_a_r_1_1_schedule_1_1_scheduler_1a5ad801e687310d2801e04af9c2b79a46">00012</link> std::string&#32;<link linkend="_class_e_a_r_1_1_schedule_1_1_scheduler_1a5ad801e687310d2801e04af9c2b79a46">EAR::Schedule::Scheduler::getName</link>(<emphasis role="keywordtype">void</emphasis>)<emphasis role="keyword">&#32;const&#32;</emphasis>{
<anchor xml:id="_scheduler_8cpp_source_1l00013"/>00013 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_name;
<anchor xml:id="_scheduler_8cpp_source_1l00014"/>00014 }
<anchor xml:id="_scheduler_8cpp_source_1l00015"/>00015 
<anchor xml:id="_scheduler_8cpp_source_1l00016"/><link linkend="_class_e_a_r_1_1_schedule_1_1_scheduler_1ae1f193171152b55e8beadadfd0bb848e">00016</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_e_a_r_1_1_schedule_1_1_scheduler_1ae1f193171152b55e8beadadfd0bb848e">EAR::Schedule::Scheduler::allocate</link>(<link linkend="_class_e_a_r_1_1_schedule_1_1_task">Task</link>&#32;*task,&#32;<emphasis role="keyword">const</emphasis>&#32;uint32_t&#32;period,&#32;<emphasis role="keyword">const</emphasis>&#32;uint32_t&#32;offset)&#32;{
<anchor xml:id="_scheduler_8cpp_source_1l00017"/>00017 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">nullptr</emphasis>&#32;==&#32;task)&#32;{
<anchor xml:id="_scheduler_8cpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;spdlog::error(<emphasis role="stringliteral">&quot;could&#32;not&#32;allocate&#32;memory&#32;for&#32;null&#32;task&#32;in&#32;{}&quot;</emphasis>,&#32;getName());
<anchor xml:id="_scheduler_8cpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_scheduler_8cpp_source_1l00020"/>00020 &#32;&#32;}
<anchor xml:id="_scheduler_8cpp_source_1l00021"/>00021 
<anchor xml:id="_scheduler_8cpp_source_1l00022"/>00022 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(period&#32;&lt;&#32;<link linkend="_itask_8h_1a45341416bad52f4521710698d33ba475">TASK_MIN_PERIOD</link>)&#32;{
<anchor xml:id="_scheduler_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;spdlog::error(<emphasis role="stringliteral">&quot;invalid&#32;period&#32;value&#32;{}&#32;for&#32;task&#32;{}&quot;</emphasis>,&#32;period,&#32;task-&gt;<link linkend="_class_e_a_r_1_1_schedule_1_1_i_task_1ab23edb8bcddff6eb970c1118e154e1ab">getName</link>());
<anchor xml:id="_scheduler_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_scheduler_8cpp_source_1l00025"/>00025 &#32;&#32;}
<anchor xml:id="_scheduler_8cpp_source_1l00026"/>00026 
<anchor xml:id="_scheduler_8cpp_source_1l00027"/>00027 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_namespace_e_a_r_1_1_schedule_1a17680738dc32d13bab0ca075b62cebd0a9941b734c90a10a2f76894c80f298acb">SCHEDULER_IDLE</link>&#32;!=&#32;m_state)&#32;{
<anchor xml:id="_scheduler_8cpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;spdlog::error(<emphasis role="stringliteral">&quot;could&#32;not&#32;allocate&#32;memory&#32;for&#32;{}&#32;when&#32;scheduler&#32;{}&#32;run&quot;</emphasis>,&#32;task-&gt;<link linkend="_class_e_a_r_1_1_schedule_1_1_i_task_1ab23edb8bcddff6eb970c1118e154e1ab">getName</link>(),&#32;getName());
<anchor xml:id="_scheduler_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_scheduler_8cpp_source_1l00030"/>00030 &#32;&#32;}
<anchor xml:id="_scheduler_8cpp_source_1l00031"/>00031 
<anchor xml:id="_scheduler_8cpp_source_1l00032"/>00032 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!task-&gt;<link linkend="_class_e_a_r_1_1_schedule_1_1_i_task_1a266bce111cbc83819da3d3f0141420cd">initialize</link>())&#32;{
<anchor xml:id="_scheduler_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;spdlog::error(<emphasis role="stringliteral">&quot;could&#32;not&#32;initialize&#32;task&#32;{}&#32;in&#32;{}&quot;</emphasis>,&#32;task-&gt;<link linkend="_class_e_a_r_1_1_schedule_1_1_i_task_1ab23edb8bcddff6eb970c1118e154e1ab">getName</link>(),&#32;getName());
<anchor xml:id="_scheduler_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;
<anchor xml:id="_scheduler_8cpp_source_1l00035"/>00035 &#32;&#32;}
<anchor xml:id="_scheduler_8cpp_source_1l00036"/>00036 
<anchor xml:id="_scheduler_8cpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;
<anchor xml:id="_scheduler_8cpp_source_1l00039"/>00039 &#32;&#32;task-&gt;<link linkend="_class_e_a_r_1_1_schedule_1_1_i_task_1ae4e7e35e6d7fff4ce5333b94a80a9772">setPeriod</link>(std::chrono::microseconds(period));
<anchor xml:id="_scheduler_8cpp_source_1l00040"/>00040 &#32;&#32;task-&gt;<link linkend="_class_e_a_r_1_1_schedule_1_1_i_task_1af7ca7c1445e7b8444150248a5a561958">setOffset</link>(std::chrono::microseconds(offset));
<anchor xml:id="_scheduler_8cpp_source_1l00041"/>00041 &#32;&#32;m_tasks.push_back(task);
<anchor xml:id="_scheduler_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;
<anchor xml:id="_scheduler_8cpp_source_1l00043"/>00043 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_scheduler_8cpp_source_1l00044"/>00044 }
<anchor xml:id="_scheduler_8cpp_source_1l00045"/>00045 
<anchor xml:id="_scheduler_8cpp_source_1l00046"/><link linkend="_class_e_a_r_1_1_schedule_1_1_scheduler_1a76d994cefe00313345e2fff2557aa517">00046</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_e_a_r_1_1_schedule_1_1_scheduler_1a76d994cefe00313345e2fff2557aa517">EAR::Schedule::Scheduler::start</link>(<emphasis role="keywordtype">void</emphasis>)&#32;{
<anchor xml:id="_scheduler_8cpp_source_1l00047"/>00047 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_namespace_e_a_r_1_1_schedule_1a17680738dc32d13bab0ca075b62cebd0a9941b734c90a10a2f76894c80f298acb">SCHEDULER_IDLE</link>&#32;!=&#32;m_state)&#32;{
<anchor xml:id="_scheduler_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;spdlog::error(<emphasis role="stringliteral">&quot;could&#32;not&#32;run&#32;the&#32;scheduler&#32;{}&#32;that&#32;was&#32;already&#32;running&quot;</emphasis>,&#32;getName());
<anchor xml:id="_scheduler_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_scheduler_8cpp_source_1l00050"/>00050 &#32;&#32;}
<anchor xml:id="_scheduler_8cpp_source_1l00051"/>00051 
<anchor xml:id="_scheduler_8cpp_source_1l00052"/>00052 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(0&#32;==&#32;m_tasks.size())&#32;{
<anchor xml:id="_scheduler_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;spdlog::error(<emphasis role="stringliteral">&quot;could&#32;not&#32;run&#32;the&#32;scheduler&#32;{}&#32;that&#32;not&#32;include&#32;any&#32;task&quot;</emphasis>,&#32;getName());
<anchor xml:id="_scheduler_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_scheduler_8cpp_source_1l00055"/>00055 &#32;&#32;}
<anchor xml:id="_scheduler_8cpp_source_1l00056"/>00056 
<anchor xml:id="_scheduler_8cpp_source_1l00057"/>00057 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;&amp;task&#32;:&#32;m_tasks)&#32;{
<anchor xml:id="_scheduler_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!task-&gt;start())&#32;{
<anchor xml:id="_scheduler_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;spdlog::critical(<emphasis role="stringliteral">&quot;could&#32;not&#32;start&#32;task&#32;{}&quot;</emphasis>,&#32;task-&gt;getName());
<anchor xml:id="_scheduler_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;}
<anchor xml:id="_scheduler_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_scheduler_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;spdlog::debug(<emphasis role="stringliteral">&quot;tasks&#32;{}&#32;started&quot;</emphasis>,&#32;task-&gt;getName());
<anchor xml:id="_scheduler_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;}
<anchor xml:id="_scheduler_8cpp_source_1l00064"/>00064 &#32;&#32;}
<anchor xml:id="_scheduler_8cpp_source_1l00065"/>00065 
<anchor xml:id="_scheduler_8cpp_source_1l00066"/>00066 &#32;&#32;m_state&#32;=&#32;<link linkend="_namespace_e_a_r_1_1_schedule_1a17680738dc32d13bab0ca075b62cebd0aca917e94ea96bf8ea2129882293812e7">SCHEDULER_RUN</link>;
<anchor xml:id="_scheduler_8cpp_source_1l00067"/>00067 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_scheduler_8cpp_source_1l00068"/>00068 }
<anchor xml:id="_scheduler_8cpp_source_1l00069"/>00069 
<anchor xml:id="_scheduler_8cpp_source_1l00070"/><link linkend="_class_e_a_r_1_1_schedule_1_1_scheduler_1a5ac0a7639be94eba0764a6c73e24e4ac">00070</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_e_a_r_1_1_schedule_1_1_scheduler_1a5ac0a7639be94eba0764a6c73e24e4ac">EAR::Schedule::Scheduler::stop</link>(<emphasis role="keywordtype">void</emphasis>)&#32;{
<anchor xml:id="_scheduler_8cpp_source_1l00071"/>00071 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_namespace_e_a_r_1_1_schedule_1a17680738dc32d13bab0ca075b62cebd0aca917e94ea96bf8ea2129882293812e7">SCHEDULER_RUN</link>&#32;!=&#32;m_state)&#32;{
<anchor xml:id="_scheduler_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;spdlog::error(<emphasis role="stringliteral">&quot;could&#32;not&#32;stop&#32;the&#32;scheduler&#32;{}&#32;that&#32;not&#32;running&quot;</emphasis>,&#32;getName());
<anchor xml:id="_scheduler_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_scheduler_8cpp_source_1l00074"/>00074 &#32;&#32;}
<anchor xml:id="_scheduler_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;
<anchor xml:id="_scheduler_8cpp_source_1l00076"/>00076 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;&amp;task&#32;:&#32;m_tasks)&#32;{
<anchor xml:id="_scheduler_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!task-&gt;stop())&#32;{
<anchor xml:id="_scheduler_8cpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;spdlog::critical(<emphasis role="stringliteral">&quot;could&#32;not&#32;stop&#32;task&#32;{}&quot;</emphasis>,&#32;task-&gt;getName());
<anchor xml:id="_scheduler_8cpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;}
<anchor xml:id="_scheduler_8cpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_scheduler_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;spdlog::debug(<emphasis role="stringliteral">&quot;task&#32;{}&#32;stopped&quot;</emphasis>,&#32;task-&gt;getName());
<anchor xml:id="_scheduler_8cpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;}
<anchor xml:id="_scheduler_8cpp_source_1l00083"/>00083 &#32;&#32;}
<anchor xml:id="_scheduler_8cpp_source_1l00084"/>00084 
<anchor xml:id="_scheduler_8cpp_source_1l00085"/>00085 &#32;&#32;m_state&#32;=&#32;<link linkend="_namespace_e_a_r_1_1_schedule_1a17680738dc32d13bab0ca075b62cebd0a9941b734c90a10a2f76894c80f298acb">SCHEDULER_IDLE</link>;
<anchor xml:id="_scheduler_8cpp_source_1l00086"/>00086 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_scheduler_8cpp_source_1l00087"/>00087 }
</programlisting></section>
