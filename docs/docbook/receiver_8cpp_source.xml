<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_receiver_8cpp_source" xml:lang="en-US">
<title>receiver.cpp</title>
<indexterm><primary>src/comm/receiver.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_receiver_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&lt;stdlib.h&gt;</emphasis>
<anchor xml:id="_receiver_8cpp_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&lt;unistd.h&gt;</emphasis>
<anchor xml:id="_receiver_8cpp_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&lt;sys/socket.h&gt;</emphasis>
<anchor xml:id="_receiver_8cpp_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&lt;fcntl.h&gt;</emphasis>
<anchor xml:id="_receiver_8cpp_source_1l00005"/>00005 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_receiver_8h">receiver.h</link>&quot;</emphasis>
<anchor xml:id="_receiver_8cpp_source_1l00006"/>00006 
<anchor xml:id="_receiver_8cpp_source_1l00007"/><link linkend="_class_e_a_r_1_1_communication_1_1_receiver_1ac6b00720f043fb9dcf0d95a6f87d3a0d">00007</link> <link linkend="_class_e_a_r_1_1_communication_1_1_receiver_1ac6b00720f043fb9dcf0d95a6f87d3a0d">EAR::Communication::Receiver::Receiver</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;name)
<anchor xml:id="_receiver_8cpp_source_1l00008"/>00008 &#32;&#32;:&#32;<link linkend="_namespace_e_a_r">EAR</link>::Communication::<link linkend="_class_e_a_r_1_1_communication_1_1_endpoint">Endpoint</link>(name)
<anchor xml:id="_receiver_8cpp_source_1l00009"/>00009 {
<anchor xml:id="_receiver_8cpp_source_1l00010"/>00010 &#32;&#32;m_client_addr_len&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(m_client_addr);
<anchor xml:id="_receiver_8cpp_source_1l00011"/>00011 &#32;&#32;spdlog::debug(<emphasis role="stringliteral">&quot;receiver&#32;{}&#32;created&quot;</emphasis>,&#32;name);
<anchor xml:id="_receiver_8cpp_source_1l00012"/>00012 }
<anchor xml:id="_receiver_8cpp_source_1l00013"/>00013 
<anchor xml:id="_receiver_8cpp_source_1l00014"/><link linkend="_class_e_a_r_1_1_communication_1_1_receiver_1a438292d5ea47a87322ce8dc7f802fb50">00014</link> <link linkend="_class_e_a_r_1_1_communication_1_1_receiver_1a438292d5ea47a87322ce8dc7f802fb50">EAR::Communication::Receiver::~Receiver</link>()&#32;{
<anchor xml:id="_receiver_8cpp_source_1l00015"/>00015 &#32;&#32;spdlog::debug(<emphasis role="stringliteral">&quot;receiver&#32;{}&#32;terminated&quot;</emphasis>,&#32;getName());
<anchor xml:id="_receiver_8cpp_source_1l00016"/>00016 }
<anchor xml:id="_receiver_8cpp_source_1l00017"/>00017 
<anchor xml:id="_receiver_8cpp_source_1l00018"/><link linkend="_class_e_a_r_1_1_communication_1_1_receiver_1a5527a09d09b092a52913468147373190">00018</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_e_a_r_1_1_communication_1_1_receiver_1a5527a09d09b092a52913468147373190">EAR::Communication::Receiver::initialize</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_e_a_r_1_1_communication_1_1_configuration">Configuration</link>&#32;&amp;config)&#32;{
<anchor xml:id="_receiver_8cpp_source_1l00019"/>00019 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_namespace_e_a_r_1_1_communication_1ac803ba2627e46dc36e58f444af88852ca196e1706170066a157198e2d31b60161">COMM_OPENED</link>&#32;==&#32;m_state)&#32;{
<anchor xml:id="_receiver_8cpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;spdlog::error(<emphasis role="stringliteral">&quot;socket&#32;for&#32;receiver&#32;{}&#32;already&#32;opened&quot;</emphasis>,&#32;getName());
<anchor xml:id="_receiver_8cpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_receiver_8cpp_source_1l00022"/>00022 &#32;&#32;}
<anchor xml:id="_receiver_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;
<anchor xml:id="_receiver_8cpp_source_1l00024"/>00024 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>sockaddr_in&#32;server_addr;
<anchor xml:id="_receiver_8cpp_source_1l00025"/>00025 
<anchor xml:id="_receiver_8cpp_source_1l00026"/>00026 &#32;&#32;memset(&amp;server_addr,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(server_addr));
<anchor xml:id="_receiver_8cpp_source_1l00027"/>00027 
<anchor xml:id="_receiver_8cpp_source_1l00028"/>00028 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(config.<link linkend="_class_e_a_r_1_1_communication_1_1_configuration_1a3d89975a093498b1d06fa9912c4a5685">ip</link>.empty())&#32;{
<anchor xml:id="_receiver_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;server_addr.sin_addr.s_addr&#32;=&#32;INADDR_ANY;
<anchor xml:id="_receiver_8cpp_source_1l00030"/>00030 &#32;&#32;}
<anchor xml:id="_receiver_8cpp_source_1l00031"/>00031 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_receiver_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!isValidAddress(config.<link linkend="_class_e_a_r_1_1_communication_1_1_configuration_1a3d89975a093498b1d06fa9912c4a5685">ip</link>))&#32;{
<anchor xml:id="_receiver_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;spdlog::error(<emphasis role="stringliteral">&quot;invalid&#32;IP&#32;format&#32;for&#32;{}&quot;</emphasis>,&#32;getName());
<anchor xml:id="_receiver_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_receiver_8cpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;}
<anchor xml:id="_receiver_8cpp_source_1l00036"/>00036 
<anchor xml:id="_receiver_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;server_addr.sin_addr.s_addr&#32;=&#32;inet_addr(config.<link linkend="_class_e_a_r_1_1_communication_1_1_configuration_1a3d89975a093498b1d06fa9912c4a5685">ip</link>.c_str());
<anchor xml:id="_receiver_8cpp_source_1l00038"/>00038 &#32;&#32;}
<anchor xml:id="_receiver_8cpp_source_1l00039"/>00039 
<anchor xml:id="_receiver_8cpp_source_1l00040"/>00040 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(0&#32;==&#32;config.<link linkend="_class_e_a_r_1_1_communication_1_1_configuration_1a34a200e4577aa7b18d1582c6acb27468">port</link>)&#32;{
<anchor xml:id="_receiver_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;spdlog::error(<emphasis role="stringliteral">&quot;invalid&#32;port&#32;number&#32;for&#32;{}&quot;</emphasis>,&#32;getName());
<anchor xml:id="_receiver_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_receiver_8cpp_source_1l00043"/>00043 &#32;&#32;}
<anchor xml:id="_receiver_8cpp_source_1l00044"/>00044 
<anchor xml:id="_receiver_8cpp_source_1l00045"/>00045 &#32;&#32;server_addr.sin_port&#32;=&#32;htons(config.<link linkend="_class_e_a_r_1_1_communication_1_1_configuration_1a34a200e4577aa7b18d1582c6acb27468">port</link>);
<anchor xml:id="_receiver_8cpp_source_1l00046"/>00046 &#32;&#32;server_addr.sin_family&#32;=&#32;AF_INET;
<anchor xml:id="_receiver_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;
<anchor xml:id="_receiver_8cpp_source_1l00048"/>00048 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(0&#32;&gt;&#32;(m_sock&#32;=&#32;socket(AF_INET,&#32;SOCK_DGRAM,&#32;0)))&#32;{
<anchor xml:id="_receiver_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;spdlog::error(<emphasis role="stringliteral">&quot;could&#32;not&#32;create&#32;socket&#32;{}&quot;</emphasis>,&#32;getName());
<anchor xml:id="_receiver_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_receiver_8cpp_source_1l00051"/>00051 &#32;&#32;}
<anchor xml:id="_receiver_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;
<anchor xml:id="_receiver_8cpp_source_1l00053"/>00053 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(0&#32;&gt;&#32;bind(m_sock,&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">struct</emphasis>&#32;sockaddr&#32;*)&#32;&amp;server_addr,&#32;<emphasis role="keyword">sizeof</emphasis>(server_addr)))&#32;{
<anchor xml:id="_receiver_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;spdlog::error(<emphasis role="stringliteral">&quot;could&#32;not&#32;bind&#32;socket&#32;for&#32;receiver&#32;{}&quot;</emphasis>,&#32;getName());
<anchor xml:id="_receiver_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_receiver_8cpp_source_1l00056"/>00056 &#32;&#32;}
<anchor xml:id="_receiver_8cpp_source_1l00057"/>00057 
<anchor xml:id="_receiver_8cpp_source_1l00058"/>00058 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(config.<link linkend="_class_e_a_r_1_1_communication_1_1_configuration_1adea7d58a6548d963addd940c6594170a">is_blocked</link>&#32;&amp;&amp;&#32;0&#32;!=&#32;config.<link linkend="_class_e_a_r_1_1_communication_1_1_configuration_1a3d5d8539abf8e4b2461757a6e52ded24">timeout</link>)&#32;{
<anchor xml:id="_receiver_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>timeval&#32;recv_timeout&#32;=&#32;{config.<link linkend="_class_e_a_r_1_1_communication_1_1_configuration_1a3d5d8539abf8e4b2461757a6e52ded24">timeout</link>&#32;/&#32;1000,&#32;config.<link linkend="_class_e_a_r_1_1_communication_1_1_configuration_1a3d5d8539abf8e4b2461757a6e52ded24">timeout</link>&#32;*&#32;1000};
<anchor xml:id="_receiver_8cpp_source_1l00060"/>00060 
<anchor xml:id="_receiver_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(0&#32;!=&#32;setsockopt(m_sock,&#32;SOL_SOCKET,&#32;SO_RCVTIMEO,&#32;&amp;recv_timeout,&#32;<emphasis role="keyword">sizeof</emphasis>(recv_timeout)))&#32;{
<anchor xml:id="_receiver_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;spdlog::error(<emphasis role="stringliteral">&quot;could&#32;not&#32;set&#32;timeout&#32;option&#32;of&#32;socket&#32;{}&quot;</emphasis>,&#32;getName());
<anchor xml:id="_receiver_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;shutdown();
<anchor xml:id="_receiver_8cpp_source_1l00064"/>00064 
<anchor xml:id="_receiver_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_receiver_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;}
<anchor xml:id="_receiver_8cpp_source_1l00067"/>00067 &#32;&#32;}
<anchor xml:id="_receiver_8cpp_source_1l00068"/>00068 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_receiver_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(fcntl(m_sock,&#32;F_SETFL,&#32;fcntl(m_sock,&#32;F_GETFL)&#32;|&#32;O_NONBLOCK)&#32;&lt;&#32;0)&#32;{
<anchor xml:id="_receiver_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;spdlog::error(<emphasis role="stringliteral">&quot;could&#32;not&#32;set&#32;non-blocking&#32;option&#32;of&#32;socket&#32;{}&quot;</emphasis>,&#32;getName());
<anchor xml:id="_receiver_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;shutdown();
<anchor xml:id="_receiver_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_receiver_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_receiver_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;}
<anchor xml:id="_receiver_8cpp_source_1l00075"/>00075 &#32;&#32;}
<anchor xml:id="_receiver_8cpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;
<anchor xml:id="_receiver_8cpp_source_1l00077"/>00077 &#32;&#32;m_state&#32;=&#32;<link linkend="_namespace_e_a_r_1_1_communication_1ac803ba2627e46dc36e58f444af88852ca196e1706170066a157198e2d31b60161">COMM_OPENED</link>;
<anchor xml:id="_receiver_8cpp_source_1l00078"/>00078 &#32;&#32;spdlog::debug(<emphasis role="stringliteral">&quot;{}&#32;receiver&#32;existed&#32;with&#32;config:&#32;IP:&#32;{},&#32;port:&#32;{},&#32;is&#32;blocked:&#32;{},&#32;timeout:&#32;{}&quot;</emphasis>,
<anchor xml:id="_receiver_8cpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getName(),&#32;config.<link linkend="_class_e_a_r_1_1_communication_1_1_configuration_1a3d89975a093498b1d06fa9912c4a5685">ip</link>,&#32;config.<link linkend="_class_e_a_r_1_1_communication_1_1_configuration_1a34a200e4577aa7b18d1582c6acb27468">port</link>,&#32;config.<link linkend="_class_e_a_r_1_1_communication_1_1_configuration_1adea7d58a6548d963addd940c6594170a">is_blocked</link>,&#32;config.<link linkend="_class_e_a_r_1_1_communication_1_1_configuration_1a3d5d8539abf8e4b2461757a6e52ded24">timeout</link>);
<anchor xml:id="_receiver_8cpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;
<anchor xml:id="_receiver_8cpp_source_1l00081"/>00081 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_receiver_8cpp_source_1l00082"/>00082 }
<anchor xml:id="_receiver_8cpp_source_1l00083"/>00083 
<anchor xml:id="_receiver_8cpp_source_1l00084"/><link linkend="_class_e_a_r_1_1_communication_1_1_receiver_1a36afeb6f988a918d2f4de04c47bbb1bf">00084</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_e_a_r_1_1_communication_1_1_receiver_1a36afeb6f988a918d2f4de04c47bbb1bf">EAR::Communication::Receiver::shutdown</link>(<emphasis role="keywordtype">void</emphasis>)&#32;{
<anchor xml:id="_receiver_8cpp_source_1l00085"/>00085 &#32;&#32;::shutdown(m_sock,&#32;SHUT_RD);
<anchor xml:id="_receiver_8cpp_source_1l00086"/>00086 &#32;&#32;m_state&#32;=&#32;<link linkend="_namespace_e_a_r_1_1_communication_1ac803ba2627e46dc36e58f444af88852caaa542228011194f7495db47077baaeaf">COMM_CLOSED</link>;
<anchor xml:id="_receiver_8cpp_source_1l00087"/>00087 
<anchor xml:id="_receiver_8cpp_source_1l00088"/>00088 &#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_receiver_8cpp_source_1l00089"/>00089 }
<anchor xml:id="_receiver_8cpp_source_1l00090"/>00090 
<anchor xml:id="_receiver_8cpp_source_1l00091"/><link linkend="_class_e_a_r_1_1_communication_1_1_receiver_1a8c56cfe48cb37f957d5441a7a61077f8">00091</link> int32_t&#32;<link linkend="_class_e_a_r_1_1_communication_1_1_receiver_1a8c56cfe48cb37f957d5441a7a61077f8">EAR::Communication::Receiver::receive</link>(<emphasis role="keywordtype">void</emphasis>&#32;*buf,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;size)&#32;{
<anchor xml:id="_receiver_8cpp_source_1l00092"/>00092 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_namespace_e_a_r_1_1_communication_1ac803ba2627e46dc36e58f444af88852ca196e1706170066a157198e2d31b60161">COMM_OPENED</link>&#32;!=&#32;m_state)&#32;{
<anchor xml:id="_receiver_8cpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;spdlog::error(<emphasis role="stringliteral">&quot;could&#32;not&#32;receive&#32;data,&#32;connection&#32;closed&#32;{}&quot;</emphasis>,&#32;getName());
<anchor xml:id="_receiver_8cpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ENOENT;
<anchor xml:id="_receiver_8cpp_source_1l00095"/>00095 &#32;&#32;}
<anchor xml:id="_receiver_8cpp_source_1l00096"/>00096 
<anchor xml:id="_receiver_8cpp_source_1l00097"/>00097 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;recvfrom(m_sock,&#32;buf,&#32;size,&#32;0,
<anchor xml:id="_receiver_8cpp_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keyword">struct</emphasis>&#32;sockaddr&#32;*)&#32;&amp;m_client_addr,
<anchor xml:id="_receiver_8cpp_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;m_client_addr_len);
<anchor xml:id="_receiver_8cpp_source_1l00100"/>00100 }
</programlisting></section>
