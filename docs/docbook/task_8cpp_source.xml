<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_task_8cpp_source" xml:lang="en-US">
<title>task.cpp</title>
<indexterm><primary>src/sched/task.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_task_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_task_8h">task.h</link>&quot;</emphasis>
<anchor xml:id="_task_8cpp_source_1l00002"/>00002 
<anchor xml:id="_task_8cpp_source_1l00003"/><link linkend="_namespace_e_a_r_1_1_schedule_1a6e548ce80b554f0a5d81048d6fdf0d91">00003</link> <emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="_namespace_e_a_r_1_1_schedule_1a6e548ce80b554f0a5d81048d6fdf0d91">EAR::Schedule::__makeParallel</link>(<emphasis role="keywordtype">void</emphasis>&#32;*args)&#32;{
<anchor xml:id="_task_8cpp_source_1l00004"/>00004 &#32;&#32;<link linkend="_class_e_a_r_1_1_schedule_1_1_task">EAR::Schedule::Task</link>&#32;*task&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_class_e_a_r_1_1_schedule_1_1_task">EAR::Schedule::Task</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(args);
<anchor xml:id="_task_8cpp_source_1l00005"/>00005 &#32;&#32;&#32;&#32;
<anchor xml:id="_task_8cpp_source_1l00006"/>00006 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">nullptr</emphasis>&#32;==&#32;task)&#32;{
<anchor xml:id="_task_8cpp_source_1l00007"/>00007 &#32;&#32;&#32;&#32;spdlog::critical(<emphasis role="stringliteral">&quot;could&#32;not&#32;start&#32;task,&#32;because&#32;conversion&#32;failed&quot;</emphasis>);
<anchor xml:id="_task_8cpp_source_1l00008"/>00008 &#32;&#32;}
<anchor xml:id="_task_8cpp_source_1l00009"/>00009 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_task_8cpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;task-&gt;<link linkend="_class_e_a_r_1_1_schedule_1_1_task_1ab67fb3675f9975bf332ae3b1ad1987b4">execute</link>();
<anchor xml:id="_task_8cpp_source_1l00011"/>00011 &#32;&#32;}
<anchor xml:id="_task_8cpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;
<anchor xml:id="_task_8cpp_source_1l00013"/>00013 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_task_8cpp_source_1l00014"/>00014 }
<anchor xml:id="_task_8cpp_source_1l00015"/>00015 
<anchor xml:id="_task_8cpp_source_1l00016"/><link linkend="_class_e_a_r_1_1_schedule_1_1_task_1a993e9146d72aa7f42ab6be98cbb554a4">00016</link> <link linkend="_class_e_a_r_1_1_schedule_1_1_task_1a993e9146d72aa7f42ab6be98cbb554a4">EAR::Schedule::Task::Task</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;name)&#32;:&#32;<link linkend="_namespace_e_a_r">EAR</link>::Schedule::<link linkend="_class_e_a_r_1_1_schedule_1_1_i_task">ITask</link>(name)&#32;{
<anchor xml:id="_task_8cpp_source_1l00017"/>00017 &#32;&#32;pthread_create(&amp;m_task,&#32;<emphasis role="keyword">nullptr</emphasis>,&#32;<link linkend="_class_e_a_r_1_1_schedule_1_1_task_1aefc4f90ae9070653843d0b07360ffef2">__makeParallel</link>,&#32;<emphasis role="keyword">this</emphasis>);
<anchor xml:id="_task_8cpp_source_1l00018"/>00018 }
<anchor xml:id="_task_8cpp_source_1l00019"/>00019 
<anchor xml:id="_task_8cpp_source_1l00020"/><link linkend="_class_e_a_r_1_1_schedule_1_1_task_1ad3b0df4e2d75d074538f3f19066bd3d6">00020</link> <link linkend="_class_e_a_r_1_1_schedule_1_1_task_1ad3b0df4e2d75d074538f3f19066bd3d6">EAR::Schedule::Task::~Task</link>()&#32;{
<anchor xml:id="_task_8cpp_source_1l00021"/>00021 &#32;&#32;pthread_join(m_task,&#32;<emphasis role="keyword">nullptr</emphasis>);
<anchor xml:id="_task_8cpp_source_1l00022"/>00022 }
<anchor xml:id="_task_8cpp_source_1l00023"/>00023 
<anchor xml:id="_task_8cpp_source_1l00024"/><link linkend="_class_e_a_r_1_1_schedule_1_1_task_1ab67fb3675f9975bf332ae3b1ad1987b4">00024</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_e_a_r_1_1_schedule_1_1_task_1ab67fb3675f9975bf332ae3b1ad1987b4">EAR::Schedule::Task::execute</link>()&#32;{
<anchor xml:id="_task_8cpp_source_1l00025"/>00025 &#32;&#32;std::chrono::steady_clock::time_point&#32;begin;
<anchor xml:id="_task_8cpp_source_1l00026"/>00026 &#32;&#32;std::chrono::steady_clock::time_point&#32;end;
<anchor xml:id="_task_8cpp_source_1l00027"/>00027 &#32;&#32;std::chrono::microseconds&#32;elapsed;
<anchor xml:id="_task_8cpp_source_1l00028"/>00028 
<anchor xml:id="_task_8cpp_source_1l00029"/>00029 &#32;&#32;<emphasis role="comment">//&#32;while&#32;keyword&#32;is&#32;to&#32;prevent&#32;that&#32;any&#32;unwanted&#32;situation&#32;breaks&#32;blocking&#32;call</emphasis>
<anchor xml:id="_task_8cpp_source_1l00030"/>00030 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(0&#32;!=&#32;pthread_cond_wait(&amp;m_start_cond_var,&#32;&amp;m_start_mutex));
<anchor xml:id="_task_8cpp_source_1l00031"/>00031 &#32;&#32;std::this_thread::sleep_for(std::chrono::microseconds(m_offset));
<anchor xml:id="_task_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;
<anchor xml:id="_task_8cpp_source_1l00033"/>00033 &#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{
<anchor xml:id="_task_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;begin&#32;=&#32;std::chrono::steady_clock::now();
<anchor xml:id="_task_8cpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;cycle();
<anchor xml:id="_task_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;end&#32;=&#32;std::chrono::steady_clock::now();
<anchor xml:id="_task_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_task_8cpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;elapsed&#32;=&#32;std::chrono::duration_cast&lt;std::chrono::microseconds&gt;(end&#32;-&#32;begin);
<anchor xml:id="_task_8cpp_source_1l00039"/>00039 
<anchor xml:id="_task_8cpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(elapsed&#32;&lt;=&#32;m_period)&#32;{
<anchor xml:id="_task_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;std::this_thread::sleep_for(std::chrono::microseconds(m_period&#32;-&#32;elapsed));
<anchor xml:id="_task_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;}
<anchor xml:id="_task_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_task_8cpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;spdlog::error(<emphasis role="stringliteral">&quot;deadline&#32;missed&#32;for&#32;task&#32;{}&quot;</emphasis>,&#32;getName());
<anchor xml:id="_task_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;std::this_thread::sleep_for(std::chrono::microseconds(m_period&#32;-&#32;(elapsed&#32;%&#32;m_period)));
<anchor xml:id="_task_8cpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;}
<anchor xml:id="_task_8cpp_source_1l00047"/>00047 &#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(m_is_running);
<anchor xml:id="_task_8cpp_source_1l00048"/>00048 
<anchor xml:id="_task_8cpp_source_1l00049"/>00049 &#32;&#32;spdlog::debug(<emphasis role="stringliteral">&quot;task&#32;{}&#32;function&#32;is&#32;over&quot;</emphasis>,&#32;getName());
<anchor xml:id="_task_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;
<anchor xml:id="_task_8cpp_source_1l00051"/>00051 &#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_task_8cpp_source_1l00052"/>00052 }
</programlisting></section>
