<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_endpoint_8cpp_source" xml:lang="en-US">
<title>endpoint.cpp</title>
<indexterm><primary>src/comm/endpoint.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_endpoint_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
<anchor xml:id="_endpoint_8cpp_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&lt;exception&gt;</emphasis>
<anchor xml:id="_endpoint_8cpp_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_endpoint_8h">endpoint.h</link>&quot;</emphasis>
<anchor xml:id="_endpoint_8cpp_source_1l00004"/>00004 
<anchor xml:id="_endpoint_8cpp_source_1l00005"/><link linkend="_class_e_a_r_1_1_communication_1_1_endpoint_1acc777efdc259e386904c4ede50bf6363">00005</link> <link linkend="_class_e_a_r_1_1_communication_1_1_endpoint_1acc777efdc259e386904c4ede50bf6363">EAR::Communication::Endpoint::Endpoint</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;name)
<anchor xml:id="_endpoint_8cpp_source_1l00006"/>00006 &#32;&#32;:&#32;m_name(name)
<anchor xml:id="_endpoint_8cpp_source_1l00007"/>00007 {
<anchor xml:id="_endpoint_8cpp_source_1l00008"/>00008 }
<anchor xml:id="_endpoint_8cpp_source_1l00009"/>00009 
<anchor xml:id="_endpoint_8cpp_source_1l00010"/><link linkend="_class_e_a_r_1_1_communication_1_1_endpoint_1a3f7469273c1bc87a96c745f0fb92ae6e">00010</link> <link linkend="_class_e_a_r_1_1_communication_1_1_endpoint_1a3f7469273c1bc87a96c745f0fb92ae6e">EAR::Communication::Endpoint::~Endpoint</link>()&#32;{
<anchor xml:id="_endpoint_8cpp_source_1l00011"/>00011 }
<anchor xml:id="_endpoint_8cpp_source_1l00012"/>00012 
<anchor xml:id="_endpoint_8cpp_source_1l00013"/><link linkend="_class_e_a_r_1_1_communication_1_1_endpoint_1a55d31b149ad01a6fd1bb5feb13488732">00013</link> std::string&#32;<link linkend="_class_e_a_r_1_1_communication_1_1_endpoint_1a55d31b149ad01a6fd1bb5feb13488732">EAR::Communication::Endpoint::getName</link>(<emphasis role="keywordtype">void</emphasis>)<emphasis role="keyword">&#32;const&#32;</emphasis>{
<anchor xml:id="_endpoint_8cpp_source_1l00014"/>00014 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_name;
<anchor xml:id="_endpoint_8cpp_source_1l00015"/>00015 }
<anchor xml:id="_endpoint_8cpp_source_1l00016"/>00016 
<anchor xml:id="_endpoint_8cpp_source_1l00017"/><link linkend="_class_e_a_r_1_1_communication_1_1_endpoint_1a3fbc44993924d9ac7f4120192e412a5a">00017</link> <link linkend="_namespace_e_a_r_1_1_communication_1ac803ba2627e46dc36e58f444af88852c">EAR::Communication::State</link>&#32;<link linkend="_class_e_a_r_1_1_communication_1_1_endpoint_1a3fbc44993924d9ac7f4120192e412a5a">EAR::Communication::Endpoint::getState</link>(<emphasis role="keywordtype">void</emphasis>)<emphasis role="keyword">&#32;const&#32;</emphasis>{
<anchor xml:id="_endpoint_8cpp_source_1l00018"/>00018 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_state;
<anchor xml:id="_endpoint_8cpp_source_1l00019"/>00019 }
<anchor xml:id="_endpoint_8cpp_source_1l00020"/>00020 
<anchor xml:id="_endpoint_8cpp_source_1l00021"/><link linkend="_class_e_a_r_1_1_communication_1_1_endpoint_1afcfeab584d3ba06a1aaa672cc491c212">00021</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_e_a_r_1_1_communication_1_1_endpoint_1afcfeab584d3ba06a1aaa672cc491c212">EAR::Communication::Endpoint::isValidAddress</link>(std::string&#32;addr)&#32;{
<anchor xml:id="_endpoint_8cpp_source_1l00022"/>00022 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos&#32;=&#32;0;
<anchor xml:id="_endpoint_8cpp_source_1l00023"/>00023 &#32;&#32;std::string&#32;delimiter&#32;=&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>;
<anchor xml:id="_endpoint_8cpp_source_1l00024"/>00024 &#32;&#32;std::string&#32;token;
<anchor xml:id="_endpoint_8cpp_source_1l00025"/>00025 &#32;&#32;std::vector&lt;int&gt;&#32;fields;
<anchor xml:id="_endpoint_8cpp_source_1l00026"/>00026 
<anchor xml:id="_endpoint_8cpp_source_1l00027"/>00027 &#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
<anchor xml:id="_endpoint_8cpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;((pos&#32;=&#32;addr.find(delimiter))&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="_endpoint_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;token&#32;=&#32;addr.substr(0,&#32;pos);
<anchor xml:id="_endpoint_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;fields.push_back(std::stoi(token));
<anchor xml:id="_endpoint_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;addr.erase(0,&#32;pos&#32;+&#32;delimiter.length());
<anchor xml:id="_endpoint_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;}
<anchor xml:id="_endpoint_8cpp_source_1l00033"/>00033 
<anchor xml:id="_endpoint_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;fields.push_back(std::stoi(addr));
<anchor xml:id="_endpoint_8cpp_source_1l00035"/>00035 
<anchor xml:id="_endpoint_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;IP&#32;v4</emphasis>
<anchor xml:id="_endpoint_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(4&#32;!=&#32;fields.size())&#32;{
<anchor xml:id="_endpoint_8cpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_endpoint_8cpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;}
<anchor xml:id="_endpoint_8cpp_source_1l00040"/>00040 
<anchor xml:id="_endpoint_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&#32;&amp;field&#32;:&#32;fields)&#32;{
<anchor xml:id="_endpoint_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(field&#32;&gt;&#32;255)&#32;{
<anchor xml:id="_endpoint_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_endpoint_8cpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_endpoint_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;}
<anchor xml:id="_endpoint_8cpp_source_1l00046"/>00046 &#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(std::exception&#32;&amp;ex)&#32;{
<anchor xml:id="_endpoint_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;spdlog::error(<emphasis role="stringliteral">&quot;could&#32;not&#32;parse&#32;IP&#32;address&#32;{}&quot;</emphasis>,&#32;getName());
<anchor xml:id="_endpoint_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_endpoint_8cpp_source_1l00049"/>00049 &#32;&#32;}
<anchor xml:id="_endpoint_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;
<anchor xml:id="_endpoint_8cpp_source_1l00051"/>00051 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_endpoint_8cpp_source_1l00052"/>00052 }
</programlisting></section>
